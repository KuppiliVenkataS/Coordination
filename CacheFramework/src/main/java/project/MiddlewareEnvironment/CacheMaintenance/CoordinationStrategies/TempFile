/*
    public void voting(){
        System.out.println( "From Voting");


        freeUpCloc_queriesList(); //free up cloc queries for new cache strategies

        String[] query_cacheLoc = new String[seed];

        //cache allocation based on the highest bidder
        for (int i = 0; i < seed; i++) {
            int max = -999; int cLoc = 0;
            for (int j = 0; j < uloc_query_freq.length; j++) {
                if (uloc_query_freq[j][i]> max){
                    max = uloc_query_freq[j][i];
                    cLoc = j;
                }

            }
            cloc_queries[cLoc].add(getQuery(i)); // add ith query at jth location

        }

        //test

        System.out.println("uloc  query  freq");
        for (int i = 0; i < uloc_query_freq.length; i++) {
            for (int j = 0; j < uloc_query_freq[i].length; j++) {
                System.out.println(i +"     "+j+"      "+uloc_query_freq[i][j]);
            }
        }


        System.out.println("*********************************************************");
        System.out.println("loc      query from Voting");
        for (int i = 0; i < numLoc; i++) {
            for (Query_Coord qTemp :
                   cloc_queries[i] ) {
                System.out.println(i +"   "+qTemp.getqID());
            }
        }

        //test master-slave with new query input
        for (int i = 0; i < numTests; i++) {


            ArrayList<Query_Coord> testQueries = testInputs[i].getQueries();
            int responseTime = 0;

            for (Query_Coord qtemp :
                    testQueries) {

                String cloc = getCloc_querynum(i,Integer.parseInt(qtemp.getQuery()));

                if (qtemp.getLoc().equals(cloc)) {
                    responseTime += 10;
                     System.out.println(qtemp.getqID()+" "+qtemp.getLoc()+" "+cloc+" "+responseTime);
                } else {
                    responseTime += 100;
                     System.out.println(qtemp.getqID()+" "+qtemp.getLoc()+" "+cloc+" "+responseTime);
                }
            }

            System.out.println(i+"the test -  Response time Voting -- " + responseTime * (1.0) / numQueries);
        }
    }
*/

