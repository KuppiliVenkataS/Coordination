public void negotiation(){
        //create association matrix

        int[][] association_matrix = new int[seed][seed];
        ArrayList<Query_Coord>[] tempCacheLists = new ArrayList[numLoc];
        for (int i = 0; i < trainInput.length; i++) {
            ArrayList<Query_Coord> testQueries = trainInput[i].getQueries();

            for (int j = 0; j < testQueries.size(); j++) {
                for (int k = j+1; k < testQueries.size(); k++) {
                    int j1 = Integer.parseInt(testQueries.get(j).getQuery());
                    int k1 = Integer.parseInt(testQueries.get(k).getQuery());
                    if(j1 != k1){
                        association_matrix[j1][k1] +=1;
                        association_matrix[k1][j1] = association_matrix[j1][k1];
                    }

                }
            }

        }

        freeUpCloc_queriesList(); // free up caches
        // first allocate queries to caches according to master/slave
        int queryNo = 0;
        while (queryNo < seed) {
            for (int j = 0; j < numLoc; j++, queryNo++) {
                if (queryNo < seed)
                    cloc_queries[j].add(getQueryObject( queryNo));// Only once added
            }

        }

        //for each cache, check associations and create contention lists
        int max_queriesAtaCache = numQueries/numLoc;
        ArrayList[] tempCacheRequirementLists = new ArrayList[numLoc];


        //check cache associations among themselves
        for (int i = 0; i < numLoc; i++) {
            for (Query_Coord qtemp :
                    cloc_queries[i]) {
                int qtempSeed = Integer.parseInt(qtemp.getQuery());

                for (int j = 0; j < seed; j++) {
                    int max = 0;
                    for (int k = j + 1; k < seed; k++) {
                        if (association_matrix[j][k] > max) {
                            max = association_matrix[j][k];
                        }
                    }


                    if (association_matrix[qtempSeed][j] > max / 2) {

                    }

                }
            }

        }



    }