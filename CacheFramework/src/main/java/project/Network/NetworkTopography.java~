package project.Network;

import java.util.HashMap;

/**
 * Created by Santhilata on 06/08/14.
 * This should be a configuration file
 * Agent platform does the same functionality as this.
 *
 * ****************************************************************************************
 * LAN Delay

 The following values are typical for a LAN:

 Transmission rate: R = 100 Mbits/second
 Bit transmission time: 1/R = 10 nsec/bit
 Distance: D = 0.1 miles

 Then we have

 dtrans = 1Kbits * 10 ns/bit = 10 µsec
 dprop = 0.1 mi * 10 µsec/mi = 1 µsec

 The queue delay dqueue depends on the load factor. If the load factor is less than 0.1 then the queue delay is almost always smaller than the transmission delay. If the load factor is less than 0.5 then the queue delay is no more than 2 or 3 times the transmission delay.

 For modern network equipment, the nodal processing delay is insignificant. The above calculations show that the transmission delay is the most significant component of the nodal delay for a lightly loaded link, but the queue delay dominates for a heavily loaded link.
 *
 * ****************************************************************************************
 * WAN Delay
 *
 * The following values are typical for a WAN:

 Transmission rate: R = 10 Gbits/second
 Bit transmission time: 1/R = 0.1 nsec/bit
 Distance: D = 100 miles

 Then we have

 dtrans = 1Kbits * 0.1 ns/bit = 100 nsec
 dprop = 100 mi * 10 µsec/mi = 1 msec

 The queue delay dqueue depends on the load factor, but is small compared to the propagation delay unless the load factor is close to 1.0.

 For modern network equipment, the nodal processing delay is insignificant. The above calculations show that the propagation delay is the most significant component of the nodal delay.

 *
 * *
 * ****************************************************************************************

 long d_nodal; //Each nodal delay is the time between the arrival of a packet at a node and its arrival at the next node. The above equation decomposes the nodal delay into components that are simpler to analyze.
 long d_proc; //The nodal processing delay dproc is the time that a node spends processing a packet. This includes time for error checking, time for reading the packet header, and time for looking up the link to the next node, based on the destination address.
 // Although the processing may sound complicated, the nodal processing delay is usually negligible compared to other terms in the delay equation.
 long  d_queue ; // The queuing delay dqueue is the time that a packet spends in a queue at a node while waiting for other packets to be transmitted. If the node is a high-speed router then there is one queue for each outgoing link, so a packet waits only for other packets that are going across the same link.
 // The queuing delay is related to the transmission delay dtrans by the following approximate equation.
 //dqueue = dtrans 	* 	lqueue
 // Here, lqueue is the average length of the queue. The average queue length depends on the load factor, which is the ratio of the attempted link transmission rate to the link maximum transmission rate. The average queue length is typically less than 1 for a load factor less than 1/2. When the load factor exceeds 1, the queue length grows without bound.
 long  d_trans; // The transmission delay dtrans is the time required to put an entire packet into the communication media. It can be computed by the following equation.
 // dtrans = L/R
 //Here, L is the length of a packet in bits and R is the transmission rate in bits per time unit. The time unit in dtrans and R should be the same.
 long  d_prop; //The propagation delay dprop is the time that it takes a signal change to propagate through the communication media from a node to the next node. It can be computed using the following equation.
 //dprop = D/s
 //Here, D is the distance from the node to the next node and s is propagation speed of the media.
 //For links using radio broadcast, a signal change propagates at close to the speed of light, which is about 186,000 miles per second. For copper and fiber links,
 // a signal change propagates at 60% to 80% of the speed of light. For back-of-the-envelope calculations in copper or fiber links, 100,000 miles per second is a convenient approximation to the propagation speed.
*
 * *
 * ****************************************************************************************
 */
public class NetworkTopography {
    //general data packet related costs


    double  d_nodal;
    double  d_proc;
    double  d_queue ;
    double d_trans;
    double d_prop;
    double loadFactor;



    protected HashMap<String, String> caches = new HashMap<String, String>();
    protected HashMap<String, String> dataStores = new HashMap<String, String>();
    protected HashMap<String, String> replicas = new HashMap<String, String>();
    protected HashMap<String, String> userAgents = new HashMap<String, String>();

    public NetworkTopography(){}
    public void addReplica(){}
    public void addCache(){}

    /**
     * This method should search for a particular address of the cache in the given HashMap
     * @param cacheName
     * @return
     */
    public String getCacheAddress(String cacheName){
        String address = "";
        return  address;
    }

    /**
     * This method is used while relocating cache
     * @param cacheName
     */
    public void relocateCache(String cacheName){}

    /**
     * This method is to  calculate network delay while calculating time
     * @return
     */
    public long calculateNetworkDelay(){

        d_nodal = d_proc  + d_queue + d_trans + d_prop;

        return (long)d_nodal;
    }

    /**
     * For the purpose of local caches
     * @param loadFactor
     * @return
     */
    public long  getLAN_Delay(double loadFactor, double dataSizeinGB){ // for light loaded loadFactor is 0.1 and heavily loaded loadFactor is 0.5
        d_trans = 10000 ; // millisec for 1KB
        d_trans = d_trans*dataSizeinGB*1000000; //millisec for real loads
        d_prop = 1000; //millisec
       // loadFactor = 0.1;

        if (loadFactor == 0.1)
        d_queue = 0.5 * d_trans; // smaller than transmission delay
        else  if (loadFactor == 0.5){ // heavily loaded
            d_queue = 2.5 * d_trans;
        }

        d_proc = 0.0; // for modern networks nor significant

        return calculateNetworkDelay();
    }

    /**
     * for data requests sent to the Databases
     * @param loadFactor
     * @return
     */

    public long getWAN_Delay(double loadFactor, double dataSizeinGB){// for heavily loaded loadFactor is 1.0
        d_trans =  100000000 ; // millisec for 1KB
        d_trans = d_trans*dataSizeinGB*1000000; //millisec for real loads
        d_prop =  1 ; // millisec

        if (loadFactor == 0.1)
            d_queue = d_prop; // compared to propagation delay
        else  if (loadFactor == 1.0) { // heavily loaded
            d_queue = d_trans*0.5;
        }

        d_proc = 0.0;
        return  calculateNetworkDelay();

    }

    /**
     * This method is to calculate NetworkResourceUtilization
     * and return some measure to calculate overall resource utilization
     * @return
     */
    public long calculateResourceUtilization(){
        long someMeasure=0;

        return someMeasure;
    }


}
