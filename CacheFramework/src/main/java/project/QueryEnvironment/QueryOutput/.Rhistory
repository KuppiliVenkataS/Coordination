2+2
pi
2*pi*67 / 45
2*pi*67 / 45*45
2*pi*67 / (45*45)
year <- c(1800,1850, 1900, 1950)
carbon <- c(854,564, 7896, 6)
plot(carbon, ~year, pch=16)
plot(carbon ~year, pch=16)
fossilFuel <- data.frame(Year=year, Carbon=carbon)
fossilfuel
fossilFuel
rm(Year, Carbon)
rm(year, carbon)
plot(carbon ~year, data=fossilFuel, pch=16)
plot(Carbon ~Year, data=fossilFuel, pch=16)
getwd()
ls()
range(fossilFuel$Carbon)
## 4 cities
fourcities <-c("Totonto","London","NewYork","Canberra")
##Display in alphabetical order
sort(fourcities)
nchar("Totonto")
nchar(fourcities)
Summary(cars)
library(help="datasets")
library(MASS)
data()
data(phones)
year
phones
cars
summary(cars)
hist(cars$speed)
celcius <-(0:4)*10
fah <- 9/5*celcius+32
conversion <- data.frame(Cel=celcius, Fah = fah)
print(conversion)
apropos("sort")
apropos("sor")
image()
example(image)
flower <- read.csv("~/Data Analysis/R/flower.csv", header=FALSE)
View(flower)
flower <- read.csv("~/Data Analysis/R/flower.csv", header=FALSE)
View(flower)
sessionInfo()
data()
library(DAAG)
library(MASS)
library(DAAG)
sessionInfo()
load("~/Data Analysis/R/DAAG/data/ACF1.rda")
library(DAAG)
data(package="~/Data Analysis/R/DAAG")
install.packages("~/Data Analysis/R/DAAG")
install.packages("~/Data Analysis/R/DAAG")
data(package="~/Data Analysis/R/DAAG")
data(package="~/Data Analysis/R/DAAG/data")
data(package="~/Data Analysis/R/DAAG/")
Sys.getenv("R_HOME")
Sys.getenv("lib")
Sys.getenv('lib')
install.packages("DAAG",lib="~/Data Analysis/R/")
library(DAAG, lib.loc="~/Data Analysis/R/")
nbranch <- subset(rainforest,species=="Acasia mabellae")$branch
nbranch
nbranch <- subset(rainforest,species=="Acacia mabellae")$branch
nbranch
mean(nbranch)
mean(nbranch, na.rm=TRUE)
NA==35
nbranch[(is.na(nbranch))] <- -999
nbranch
mena(nbranch)
mean(nbranch)
## create character vector
gender <- c(rep("female",691), rep("male",692))
levels(gender)
##from character vector create factor
gender <- factor(gender)
levels(gender)
gender <- factor(gender, levels=c("male","female"))
levels(gender)
numjobs <- c(982,982, 984, 981,981,983,983,983,983,979,973,979,974,981,985,987,986,980,983,988,994,990,999)
numjobs <- ts(numjobs, start=1995, frequency=12)
plot(numjobs)
first15 <- window(numjobs, start=1995.75, end= 1996.25)
first15
cars.summary
cars93.summary
Cars93.summary
library()
install.packages("ggplot2")
library(DAAG, lib.loc="~/Dropbox/Data Analysis/R/")
install.packages("DAAG",lib="~/Dropbox/Data Analysis/R/")
install.packages("DAAG",lib="~/Dropbox/Data Analysis/R/")
library(DAAG, lib.loc="~/Dropbox/Data Analysis/R/")
library(ggplot2,lib.loc="~//R//x86_64-pc-linux-gnu-library//3.0")
clear()
clear
quit()
install.packages("swirl",lib.loc="~/R//x86_64-pc-linux-gnu-library//3.0")
library(swirl,lib.loc="~//R//x86_64-pc-linux-gnu-library//3.0")
library(swirl,lib.loc="~//R//x86_64-pc-linux-gnu-library//3.0")
install.packages("swirl")
version
install.packages("swirl")
version
install.packages("swirl")
library(swirl, lib.loc="â€˜/home/santhilata/R/x86_64-pc-linux-gnu-library/3.1")
library(swirl, lib.loc="/home/santhilata/R/x86_64-pc-linux-gnu-library/3.1")
ls()
rm(list=ls())
ls()
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 +100
my_sqrt <-sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 +1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create(testdir)
?dir.create()
nxt()
testdir <- dir.create(getwd(),TRUE,FALSE,"0777")
dir.create(testdir,TRUE,FALSE,"0777")
dir.create("~//home//santhilata//Downloads//rstudio-0.98.1091//bin//testdir",TRUE,FALSE,"0777")
dir.create("~//Downloads//rstudio-0.98.1091//bin//testdir",TRUE,FALSE,"0777")
testdir <- getwd()
dir.create("testdir")
?setwd()
setwd(testdir)
setwd("testdir"")
setwd("testdir")
setwd("testdir")
file.create("mytest.R")
list.flies
list.flies()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R""mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("testdir","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
file.path(dir.create("testdir2",recursive=TRUE),"testdir3")
dir.create(file.path("testdir2","testdir3"), recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
my_seq=seq(0,10, by=0.5)
my_seq=seq(5,10, length=30)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
1:seq(along.with=my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2),times = 10)
rep(c(0,1,2),each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("my", "name","is")
my_char <- c("My", "name","is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "santhilata")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste (c(1:3), c("X","Y","Z", sep = ""))
paste (c(1:3), c("X","Y","Z"), , sep = "")
paste (c(1:3), c("X","Y","Z"),  sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
1/0
0 / 0
Inf - Inf
bye()
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3,5,7])
play()
x[3]
x[3,5]
c(x[3],x[5],x[7])
nxt()
c(x[3],x[5,x[7]])
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2, NA)
names(vect2) <- names(vect)
names(vect2) <- c("foo","bar","norf")
identical(names(vect2),names(vect))
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vect)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE,FALSE, FALSE)
TRUE && c(TRUE,FALSE, FALSE)
TRUE | c(TRUE,FALSE, FALSE)
TRUE || c(TRUE,FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints>5
which(ints > 7)
any(ints <0)
all(ints >0)
bye()
q()
?download.file
setwd("//home/santhilata/Dropbox//ImprovedCacheLearning//src/main/java/project//QueryEnvironment//QueryOutput")
data <- read.csv("test.csv")
data_5_lines <- head(data,6)
plot(data_5_lines$no_of_subqueries, data_5_lines$X1_Overlap)
?read.csv
data <- read.csv("test.csv",header=TRUE)
data <- read.csv("test.csv",header=TRUE,sep=",",na.strings="NA",dec=".",newline="\n")
data <- read.csv("test.csv",header=TRUE,sep=",",na.strings="NA",dec=".",quote="\n")
head(data)
data <- read.csv("test.csv",header=TRUE,sep=",",na.strings="NA",dec=".")
head(data)
data <- read.csv("test.csv",header=TRUE,sep=",",na.strings="NA")
head(data)
data_5_lines <- head(data,5)
data_5_lines
plot(data_5_lines$no_of_subqueries,data_5_lines$X1_Overlap)
plot(data_5_lines$no_of_subqueries,data_5_lines$X1_Overlap,pch=21)
points(data_5_lines$no_of_subqueries,data_5_lines$X2_Overlap,pch=22)
points(data_5_lines$no_of_subqueries,data_5_lines$X3_Overlap,pch=23)
points(data_5_lines$no_of_subqueries,data_5_lines$X4_Overlap,pch=24)
points(data_5_lines$no_of_subqueries,data_5_lines$X5_Overlap,pch=25)
xyplot(data_5_lines$no_of_subqueries,data_5_lines$X1_Overlap,pch=21)
library(lattice)
xyplot(data_5_lines$no_of_subqueries,data_5_lines$X1_Overlap,pch=21)
xyplot(data_5_lines$X1_Overlap~data_5_lines$no_of_subqueries,pch=21)
lines(data_5_lines$X1_Overlap~data_5_lines$no_of_subqueries,pch=21)
lines(data_5_lines$X1_Overlap~data_5_lines$no_of_subqueries,type="o")
xyplot(data_5_lines$X1_Overlap~data_5_lines$no_of_subqueries,pch=21)
xyplot(data_5_lines$X2_Overlap~data_5_lines$no_of_subqueries,pch=22)
?dotplot
library(graphics)
?dotplot
with(data_5_lines, plot(data_5_lines$no_of_subqueries,data_5_lines$X1_Overlap, type="l"))
with(data_5_lines,lines(data_5_lines$no_of_subqueries,data_5_lines$X2_Overlap))
with(data_5_lines,lines(data_5_lines$no_of_subqueries,data_5_lines$X3_Overlap))
with(data_5_lines,lines(data_5_lines$no_of_subqueries,data_5_lines$X4_Overlap))
with(data_5_lines, plot(data_5_lines$no_of_subqueries,data_5_lines$X5_Overlap, type="l"))
with(data_5_lines,lines(data_5_lines$no_of_subqueries,data_5_lines$X4_Overlap))
with(data_5_lines,lines(data_5_lines$no_of_subqueries,data_5_lines$X3_Overlap))
with(data_5_lines,lines(data_5_lines$no_of_subqueries,data_5_lines$X2_Overlap))
with(data_5_lines,lines(data_5_lines$no_of_subqueries,data_5_lines$X1_Overlap))
with(data_5_lines, plot(data_5_lines$X1_Overlap,data_5_lines$no_of_subqueries, type="l"))
with(data_5_lines, plot(data_5_lines$no_of_subqueries,data_5_lines$X1_Overlap, type="l"))
xyplot(data_5_lines$X2_Overlap~data_5_lines$no_of_subqueries,pch=22)
xyplot(data_5_lines$X1_Overlap~data_5_lines$no_of_subqueries,pch=21)
points(data_5_lines$X2_Overlap~data_5_lines$no_of_subqueries,pch=22)
lines(data_5_lines$X2_Overlap~data_5_lines$no_of_subqueries,pch=22)
lines(data_5_lines$X2_Overlap~data_5_lines$no_of_subqueries,pch=22, type="l",lty="solid")
xyplot(data_5_lines$X1_Overlap~data_5_lines$no_of_subqueries,pch=21)
lines(data_5_lines$X2_Overlap~data_5_lines$no_of_subqueries,pch=22, type="l",lty="solid")
xyplot(data_5_lines$X2_Overlap~data_5_lines$no_of_subqueries,pch=22)
plot(data_5_lines$X2_Overlap,type-"l",lty="solid")
plot(data_5_lines$X2_Overlap,type="l",lty="solid")
library(plyr)
ggplot(data_5_lines, aes(x=data_5_lines$no_of_subqueries, y=data_5_lines$X1_Overlap, colour=supp)) + geom_line()
?ggplot
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
ggplot(data_5_lines, aes(x=data_5_lines$no_of_subqueries, y=data_5_lines$X1_Overlap, colour=supp)) + geom_line()
ggplot(data_5_lines, aes(x=data_5_lines$no_of_subqueries, y=data_5_lines$X1_Overlap, colour=supp))
ggplot(data_5_lines, aes(x=data_5_lines$no_of_subqueries, y=data_5_lines$X1_Overlap, colour=supp)) + geom_line()
ggplot(data_5_lines, aes(x=data_5_lines$no_of_subqueries, y=data_5_lines$X1_Overlap, colour="red")) + geom_line()
mat_data <- matrix(data_5_lines)
matplot(data_5_lines, type = c("b"),pch=1,col = 5:9)
data_6_10 <- subset(data,6:10)
data_6_10 <- subset(data,nrow(6:10))
data_6_10 <- subset(data,rownum>=6 && rownum <=10)
data_6_10 <- subset(data, data$time.type=="Fixed" && data$query.repetition =="Poisson")
matplot(data_6_10, type=c("b"),pch =1, col= 5:9)
mat_6_10 <- matrix(data_6_10)
matplot(mat_6_10, type=c("b"),pch =1, col= 5:9)
